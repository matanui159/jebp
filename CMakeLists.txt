cmake_minimum_required(VERSION 3.10)
project(jebp C)
include(CTest)
include(CheckCCompilerFlag)

# Options
if("${CMAKE_BUILD_TYPE}" STREQUAL Debug)
    set(log_errors_default ON)
endif()
option(JEBP_STDIO "Enable I/O support" ON)
option(JEBP_SIMD "Enable SIMD optimizations" ON)
option(JEBP_LOG_ERRORS "Enable error logging" ${log_errors_default})
option(JEBP_VP8L "Enable VP8L support" ON)

# Compiler flags
function(add_c_compiler_flag flag var)
    check_c_compiler_flag(${flag} ${var})
    if(${var})
        add_compile_options(${flag})
    endif()
endfunction()
set(CMAKE_C_STANDARD_REQUIRED ON)
if(MSVC)
    set(CMAKE_C_STANDARD 11)
    add_compile_options(/W2 /external:W0)
else()
    set(CMAKE_C_STANDARD 99)
    add_c_compiler_flag(-Wall HAVE_WALL)
    add_c_compiler_flag(-Wextra HAVE_WEXTRA)
    add_c_compiler_flag(-Wpedantic HAVE_WPEDANTIC)
endif()
if(NOT JEBP_STDIO)
    add_compile_definitions(JEBP_NO_STDIO)
endif()
if(NOT JEBP_SIMD)
    add_compile_definitions(JEBP_NO_SIMD)
endif()
if(JEBP_LOG_ERRORS)
    add_compile_definitions(JEBP_LOG_ERRORS)
endif()
if(NOT JEBP_VP8L)
    add_compile_definitions(JEBP_NO_VP8L)
endif()

# Demo program
find_package(SDL2)
if(SDL2_FOUND)
    add_executable(jebpview WIN32 jebpview.c)
    target_link_libraries(jebpview PRIVATE SDL2::SDL2 SDL2::SDL2main)
endif()

add_subdirectory(dev)
