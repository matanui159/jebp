cmake_minimum_required(VERSION 3.10)
project(jebp C)
include(CTest)
include(CheckCCompilerFlag)

# Options
if(CMAKE_BUILD_TYPE MATCHES ^Rel)
    set(werror_default ON)
endif()
if(CMAKE_BUILD_TYPE STREQUAL Debug)
    set(log_errors_default ON)
endif()
option(JEBP_WERROR "Treat warnings as errors" ${werror_default})
option(JEBP_SANITIZE "Enable sanitizers")
option(JEBP_STDIO "Enable I/O support" ON)
option(JEBP_SIMD "Enable SIMD optimizations" ON)
option(JEBP_LOG_ERRORS "Enable error logging" ${log_errors_default})
option(JEBP_VP8L "Enable VP8L support" ON)

# Utility functions
function(add_c_compiler_flag flag var)
    check_c_compiler_flag(${flag} ${var})
    if(${var})
        add_compile_options(${flag})
    endif()
endfunction()

function(add_c_flag flag var)
    set(CMAKE_REQUIRED_LIBRARIES ${flag})
    check_c_compiler_flag(${flag} ${var})
    unset(CMAKE_REQUIRED_LIBRARIES)
    if(${var})
        add_compile_options(${flag})
        set(link_options ${link_options} ${flag} PARENT_SCOPE)
    endif()
endfunction()

# Compiler flags
set(CMAKE_C_STANDARD_REQUIRED ON)
if(MSVC)
    set(CMAKE_C_STANDARD 11)
    add_c_compiler_flag(-W3 HAVE_W3)
    add_c_compiler_flag(-external:W0 HAVE_EXTERNAL)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
    if(JEBP_WERROR)
        add_c_compiler_flag(-WX HAVE_WX)
    endif()
else()
    set(CMAKE_C_STANDARD 99)
    add_c_compiler_flag(-Wall HAVE_WALL)
    add_c_compiler_flag(-Wextra HAVE_WEXTRA)
    add_c_compiler_flag(-Wpedantic HAVE_WPEDANTIC)
    if(JEBP_WERROR)
        add_c_compiler_flag(-Werror HAVE_WERROR)
    endif()
endif()
if(JEBP_SANITIZE)
    add_c_flag(-fsanitize=address HAVE_FSANITIZE_ADDRESS)
    if(HAVE_FSANITIZE_ADDRESS)
        add_c_flag(-fsanitize-address-use-after-return=always HAVE_FSANITIZE_USE_AFTER_RETURN)
        add_c_flag(-fsanitize-address-use-after-scope HAVE_FSANITIZE_USE_AFTER_SCOPE)
    endif()
    add_c_flag(-fsanitize=leak HAVE_FSANITIZE_LEAK)
    add_c_flag(-fsanitize=undefined HAVE_FSANITIZE_UNDEFINED)
endif()
if(NOT JEBP_STDIO)
    add_compile_definitions(JEBP_NO_STDIO)
endif()
if(NOT JEBP_SIMD)
    add_compile_definitions(JEBP_NO_SIMD)
endif()
if(JEBP_LOG_ERRORS)
    add_compile_definitions(JEBP_LOG_ERRORS)
endif()
if(NOT JEBP_VP8L)
    add_compile_definitions(JEBP_NO_VP8L)
endif()

# Demo program
find_package(SDL2)
if(SDL2_FOUND)
    add_executable(jebpview WIN32 jebpview.c)
    target_link_libraries(jebpview PRIVATE ${link_options} SDL2::SDL2 SDL2::SDL2main)
endif()

add_subdirectory(dev)
